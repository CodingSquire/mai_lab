// Code generated by protoc-gen-go. DO NOT EDIT.
// source: users.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsExistByIdRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsExistByIdRequest) Reset()         { *m = IsExistByIdRequest{} }
func (m *IsExistByIdRequest) String() string { return proto.CompactTextString(m) }
func (*IsExistByIdRequest) ProtoMessage()    {}
func (*IsExistByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{0}
}

func (m *IsExistByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsExistByIdRequest.Unmarshal(m, b)
}
func (m *IsExistByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsExistByIdRequest.Marshal(b, m, deterministic)
}
func (m *IsExistByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsExistByIdRequest.Merge(m, src)
}
func (m *IsExistByIdRequest) XXX_Size() int {
	return xxx_messageInfo_IsExistByIdRequest.Size(m)
}
func (m *IsExistByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsExistByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsExistByIdRequest proto.InternalMessageInfo

func (m *IsExistByIdRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IsExistByIdResponse struct {
	IsExist              bool     `protobuf:"varint,1,opt,name=isExist,proto3" json:"isExist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsExistByIdResponse) Reset()         { *m = IsExistByIdResponse{} }
func (m *IsExistByIdResponse) String() string { return proto.CompactTextString(m) }
func (*IsExistByIdResponse) ProtoMessage()    {}
func (*IsExistByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{1}
}

func (m *IsExistByIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsExistByIdResponse.Unmarshal(m, b)
}
func (m *IsExistByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsExistByIdResponse.Marshal(b, m, deterministic)
}
func (m *IsExistByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsExistByIdResponse.Merge(m, src)
}
func (m *IsExistByIdResponse) XXX_Size() int {
	return xxx_messageInfo_IsExistByIdResponse.Size(m)
}
func (m *IsExistByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsExistByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsExistByIdResponse proto.InternalMessageInfo

func (m *IsExistByIdResponse) GetIsExist() bool {
	if m != nil {
		return m.IsExist
	}
	return false
}

func init() {
	proto.RegisterType((*IsExistByIdRequest)(nil), "proto.IsExistByIdRequest")
	proto.RegisterType((*IsExistByIdResponse)(nil), "proto.IsExistByIdResponse")
}

func init() { proto.RegisterFile("users.proto", fileDescriptor_030765f334c86cea) }

var fileDescriptor_030765f334c86cea = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2d, 0x4e, 0x2d,
	0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x2a, 0x5c, 0x42, 0x9e,
	0xc5, 0xae, 0x15, 0x99, 0xc5, 0x25, 0x4e, 0x95, 0x9e, 0x29, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x4c, 0x99,
	0x29, 0x4a, 0xfa, 0x5c, 0xc2, 0x28, 0xaa, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8,
	0xd8, 0x33, 0x21, 0xc2, 0x60, 0xb5, 0x1c, 0x41, 0x30, 0xae, 0x91, 0x3f, 0x17, 0x6b, 0x28, 0xc8,
	0x32, 0x21, 0x37, 0x2e, 0x6e, 0x24, 0x9d, 0x42, 0x92, 0x10, 0xdb, 0xf5, 0x30, 0xed, 0x94, 0x92,
	0xc2, 0x26, 0x05, 0xb1, 0x48, 0x89, 0x21, 0x89, 0x0d, 0x2c, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xec, 0x4e, 0x94, 0xf8, 0xc4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersClient interface {
	IsExistById(ctx context.Context, in *IsExistByIdRequest, opts ...grpc.CallOption) (*IsExistByIdResponse, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) IsExistById(ctx context.Context, in *IsExistByIdRequest, opts ...grpc.CallOption) (*IsExistByIdResponse, error) {
	out := new(IsExistByIdResponse)
	err := c.cc.Invoke(ctx, "/proto.Users/IsExistById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
type UsersServer interface {
	IsExistById(context.Context, *IsExistByIdRequest) (*IsExistByIdResponse, error)
}

// UnimplementedUsersServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (*UnimplementedUsersServer) IsExistById(ctx context.Context, req *IsExistByIdRequest) (*IsExistByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistById not implemented")
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_IsExistById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsExistByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).IsExistById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Users/IsExistById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).IsExistById(ctx, req.(*IsExistByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsExistById",
			Handler:    _Users_IsExistById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
